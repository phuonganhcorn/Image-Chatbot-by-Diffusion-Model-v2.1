"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var d3_scale_1 = require("d3-scale");
exports.calculateOrigin = function (container, _a) {
    var offsetX = _a.x, offsetY = _a.y;
    var _b = exports.absoluteContainerPosition(container), containerX = _b.x, containerY = _b.y;
    return { x: containerX + offsetX, y: containerY + offsetY };
};
exports.calculateAngleDelta = function (_a, _b) {
    var x1 = _a.x, y1 = _a.y;
    var x2 = _b.x, y2 = _b.y;
    return Math.atan2(x1 * y2 - y1 * x2, x1 * x2 + y1 * y2);
};
exports.calculateAngleFromOrigin = function (_a, _b) {
    var originX = _a.x, originY = _a.y;
    var pointX = _b.x, pointY = _b.y;
    var angleInRadians = Math.atan2(pointY - originY, pointX - originX);
    if (angleInRadians < 0) {
        angleInRadians += 2 * Math.PI;
    }
    return angleInRadians;
};
exports.calculateAngleToPoint = function (container, offset, point) {
    var origin = exports.calculateOrigin(container, offset);
    return exports.calculateAngleFromOrigin(origin, point);
};
exports.calculateAngleBetweenPoints = function (_a, _b, _c) {
    var originX = _a.x, originY = _a.y;
    var startX = _b.x, startY = _b.y;
    var endX = _c.x, endY = _c.y;
    var startPoint = { x: startX - originX, y: startY - originY };
    var endPoint = { x: endX - originX, y: endY - originY };
    return exports.calculateAngleDelta(startPoint, endPoint);
};
exports.calculateRadialPosition = function (container, offset, radius, point) {
    var angleInRadians = exports.calculateAngleToPoint(container, offset, point);
    return {
        x: offset.x + radius * Math.cos(angleInRadians),
        y: offset.y + radius * Math.sin(angleInRadians),
    };
};
exports.calculateRadialPositionFromValue = function (offset, radius, value, minValue, maxValue) {
    if (value === void 0) { value = 0; }
    if (minValue === void 0) { minValue = 0; }
    if (maxValue === void 0) { maxValue = 100; }
    var angleInRadians = exports.valueToRadians(value, minValue, maxValue);
    return {
        x: offset.x + radius * Math.cos(angleInRadians * Math.PI),
        y: offset.y + radius * Math.sin(angleInRadians * Math.PI),
    };
};
exports.absoluteContainerPosition = function (container) {
    var _a = container.getBoundingClientRect(), x = _a.left, y = _a.top;
    return { x: x, y: y };
};
exports.valueToRadians = function (value, minValue, maxValue) { return d3_scale_1.scaleLinear().domain([minValue, maxValue]).range([0, 2])(value); };
exports.angleToValue = function (angle, minValue, maxValue) { return d3_scale_1.scaleLinear().domain([0, Math.PI * 2]).range([minValue, maxValue])(angle); };
//# sourceMappingURL=geometryHelpers.js.map