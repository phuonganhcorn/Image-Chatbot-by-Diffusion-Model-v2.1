"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var eventHelpers_1 = require("./helpers/eventHelpers");
var geometryHelpers_1 = require("./helpers/geometryHelpers");
var Arc_1 = require("./components/Arc");
var DraggableWrapper_1 = require("./components/DraggableWrapper");
var CircularSlider = /** @class */ (function (_super) {
    __extends(CircularSlider, _super);
    function CircularSlider(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            pressed: false,
        };
        _this.defaultStyle = {
            position: 'relative',
        };
        _this.angle = 0;
        _this.moveListenerArgs = function (isTouch) { return ({
            moveEventType: isTouch ? 'touchmove' : 'mousemove',
            moveHandler: isTouch ? _this.handleTouchMove : _this.handleMouseMove,
        }); };
        _this.endListenerArgs = function (isTouch) { return ({
            endEventType: isTouch ? 'touchend' : 'mouseup',
            endHandler: isTouch ? _this.handleTouchEnd : _this.handleMouseUp,
        }); };
        _this.addEventListeners = function (isTouch) {
            _this.setState({ pressed: true });
            var _a = _this.moveListenerArgs(isTouch), moveEventType = _a.moveEventType, moveHandler = _a.moveHandler;
            document.addEventListener(moveEventType, moveHandler);
            var _b = _this.endListenerArgs(isTouch), endEventType = _b.endEventType, endHandler = _b.endHandler;
            document.addEventListener(endEventType, endHandler);
        };
        _this.removeEventListeners = function (isTouch) {
            _this.setState({ pressed: false });
            var _a = _this.moveListenerArgs(isTouch), moveEventType = _a.moveEventType, moveHandler = _a.moveHandler;
            document.removeEventListener(moveEventType, moveHandler);
            var _b = _this.endListenerArgs(isTouch), endEventType = _b.endEventType, endHandler = _b.endHandler;
            document.removeEventListener(endEventType, endHandler);
        };
        _this.handleMouseDown = function (e) {
            e.stopPropagation();
            _this.addEventListeners(false);
            var onMove = _this.props.onMove;
            onMove && onMove(_this.getMovementData(eventHelpers_1.absoluteMousePosition(e), true));
        };
        _this.handleTouchStart = function (e) {
            e.stopPropagation();
            _this.addEventListeners(true);
            var onMove = _this.props.onMove;
            onMove && onMove(_this.getMovementData(eventHelpers_1.absoluteTouchPosition(e), true));
        };
        _this.handleMouseUp = function (e) {
            e.stopPropagation();
            _this.removeEventListeners(false);
            var onMoveEnd = _this.props.onMoveEnd;
            onMoveEnd && onMoveEnd(_this.getMovementData(eventHelpers_1.absoluteMousePosition(e), false));
        };
        _this.handleTouchEnd = function (e) {
            e.stopPropagation();
            _this.removeEventListeners(true);
            var onMoveEnd = _this.props.onMoveEnd;
            onMoveEnd && onMoveEnd(_this.getMovementData(eventHelpers_1.absoluteTouchPosition(e), false));
        };
        _this.handleMouseMove = function (e) {
            e.stopPropagation();
            var onMove = _this.props.onMove;
            onMove && onMove(_this.getMovementData(eventHelpers_1.absoluteMousePosition(e), true));
        };
        _this.handleTouchMove = function (e) {
            e.stopPropagation();
            var onMove = _this.props.onMove;
            onMove && onMove(_this.getMovementData(eventHelpers_1.absoluteTouchPosition(e), true));
        };
        _this.getMovementData = function (position, pressed) {
            if (pressed === void 0) { pressed = false; }
            var _a = _this.props, draggableOffset = _a.draggableOffset, onMove = _a.onMove, radius = _a.radius;
            if (!_this.container || !onMove || typeof radius === 'undefined' || typeof draggableOffset === 'undefined') {
                return null;
            }
            var coordinates = geometryHelpers_1.calculateRadialPosition(_this.container, _this.center, radius + draggableOffset, position);
            if (_this.coordinates) {
                var angleInRadians = geometryHelpers_1.calculateAngleBetweenPoints(_this.center, _this.coordinates, coordinates);
                _this.value += geometryHelpers_1.angleToValue(angleInRadians, _this.props.minValue, _this.props.maxValue);
            }
            _this.coordinates = coordinates;
            return { coordinates: coordinates, value: _this.value, pressed: pressed };
        };
        _this.padding = (_this.props.size - _this.props.radius * 2) / 2;
        _this.center = {
            x: _this.props.radius + _this.padding,
            y: _this.props.radius + _this.padding,
        };
        _this.value = _this.props.value || 0;
        return _this;
    }
    CircularSlider.prototype.componentDidMount = function () {
        this.coordinates = geometryHelpers_1.calculateRadialPositionFromValue(this.center, this.props.radius + this.props.draggableOffset, this.props.value, this.props.minValue, this.props.maxValue);
        this.props.onMove &&
            this.props.onMove({ coordinates: this.coordinates, pressed: this.state.pressed, value: this.props.value });
    };
    CircularSlider.prototype.render = function () {
        var _this = this;
        var Draggable = this.props.draggable;
        return (React.createElement("div", { className: this.props.className, ref: function (el) { return (_this.container = el); }, style: __assign({}, this.defaultStyle, { width: this.props.size, height: this.props.size }) },
            this.props.children,
            React.createElement(DraggableWrapper_1.default, { onMouseDown: this.handleMouseDown, onTouchStart: this.handleTouchStart }, Draggable)));
    };
    CircularSlider.defaultProps = {
        children: React.createElement(Arc_1.default, { radius: 100, padding: 10, size: 40, thickness: 20 }),
        draggable: undefined,
        draggableOffset: 0,
        maxValue: 100,
        minValue: 0,
        motion: 'once',
        onMove: function (value) { },
        onMoveEnd: function (value) { },
        radius: 100,
        value: 0,
        size: 200,
    };
    return CircularSlider;
}(React.Component));
exports.default = CircularSlider;
//# sourceMappingURL=index.js.map